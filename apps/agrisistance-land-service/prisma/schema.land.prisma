generator client {
  provider = "prisma-client-js"
  output = "../generated/land-client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_LAND_URL")
}

model User {
  user_id              String   @id @default(uuid()) @db.Uuid
  lands                Land[]
}

model Land {
  land_id        String   @id @default(uuid()) @db.Uuid
  latitude       Float
  longitude      Float
  land_size      Float
  land_name      String?  @db.VarChar(100)
  land_image     String?  @db.VarChar(200)
  ph_level       Float
  phosphorus     Float
  potassium      Float
  oxygen_level   Float
  nitrogen       Float
  user_id        String   @db.Uuid
  user           User     @relation(fields: [user_id], references: [user_id])

  statistics     LandStatistic[]
  crops          Crop[]
  maintenances   CropMaintenance[]
  finances       Finance[]
  weather_data   Weather[]
  business_plans BusinessPlan[]

  @@unique([latitude, longitude])
}

model LandStatistic {
  land_stat_id         String   @id @default(uuid()) @db.Uuid
  land_use             Float
  human_coverage       Float
  water_availability   Float
  distribution_optimality Float
  total_profit         Float    @default(0)
  land_id              String   @db.Uuid @unique
  land                 Land     @relation(fields: [land_id], references: [land_id])
}

model Crop {
  crop_id                String  @id @default(uuid()) @db.Uuid
  crop_name              String  @db.VarChar(30)
  crop_area              Float
  crop_investment        Float
  expected_money_return  Float
  expected_weight_return Float
  land_id                String  @db.Uuid
  land                   Land    @relation(fields: [land_id], references: [land_id])
}

model CropMaintenance {
  maintenance_id    String   @id @default(uuid()) @db.Uuid
  pesticide_level   Float
  water_sufficienty Float
  land_id           String   @db.Uuid @unique
  land              Land     @relation(fields: [land_id], references: [land_id])
}

model Finance {
  financial_id      String   @id @default(uuid()) @db.Uuid
  investment_amount Float?
  expected_revenue  Float?
  land_id           String?  @db.Uuid @unique
  land              Land?    @relation(fields: [land_id], references: [land_id])
}

model Weather {
  weather_id   String  @id @default(uuid()) @db.Uuid
  temperature  Float
  humidity     Float
  rainfall     Float
  sunlight     Float
  land_id      String? @db.Uuid @unique
  land         Land?   @relation(fields: [land_id], references: [land_id])
}

model BusinessPlan {
  business_plan_id       String @id @default(uuid()) @db.Uuid
  executive_summary      String @db.Text
  resources              String @db.Text
  crops                  String @db.Text
  weather_considerations String @db.Text
  soil_maintenance       String @db.Text
  profit_estimations     String @db.Text
  other_recommendations  String @db.Text
  land_id                String @db.Uuid @unique
  land                   Land   @relation(fields: [land_id], references: [land_id])
}